/**import java.awt.Graphics2D;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

import javax.imageio.ImageIO;

import org.game.engine.Game;
import org.game.engine.GameApplication;


public class Play extends Game{
	
	public static void main(String[] args) {
		GameApplication.start(new Play());
	}
	
	final int STEP = 2;
	
	BufferedImage man;
	int frame, c;
	int reqDir, curDir;
	int column, row;
	int rows, columns;
	
	ArrayList<String> lines = new ArrayList<String>();
	
	public Play(){
		try {
			Scanner s = new Scanner(new File("maze.txt"));
			int r = 0;
			while (s.hasNextLine()){
				String line = s.nextLine();
				lines.add(line);
				if (line.contains("5")){
					row = r;
					column = line.indexOf('5');
				}
				r++;
			}
			s.close();
			
			rows = lines.size();
			columns = lines.get(0).length();
			
			width = columns*STEP;
			height = rows*STEP;
			
		} catch (FileNotFoundException e1) {
			e1.printStackTrace();
		}
		
		title = "Play";
		frame = 0;
		c = 0;
		curDir = reqDir = KeyEvent.VK_LEFT;
		column = 300;
		row = 200;
		// width = height = 400;
		
		try {
			man = ImageIO.read(new File("images/mana.png"));
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@Override
	public void keyPressed(KeyEvent e){
		int key = e.getKeyCode();
		if (key == 37){
			column -= STEP;
		}
		else if (key == 38){
			row -= STEP;
		}
		else if (key == 39){
			column += STEP;
		}
		else if (key == 40){
			row += STEP;
		}
	}

	@Override
	public void update() {
		frame++;
		if (frame == 3){
			c++;
			if (c > 1){
				c = 0;
			}
		}
		if (frame > 5){
			frame = 0;
		}
		
		if (move(reqDir) == SUCCESS) {
			curDir = reqDir;
		} else {
			move(curDir);
		}
		
	}
		static int SUCCESS = 1, FAIL = 0;
		
	private int move(int reqDir) {
		switch (reqDir) {
		case KeyEvent.VK_LEFT: // 37
			if (column > 0 && charAt(row, column-1) != '0') {
				column -= 1;
				return SUCCESS;
			}
			break;
		case KeyEvent.VK_UP:   // 38
			if (row > 0 && charAt(row-1, column) != '0') {
				row -= 1;
				return SUCCESS;
			}
			break;
		case KeyEvent.VK_RIGHT: // 39
			if (column < columns-1 && charAt(row, column+1) != '0') {
				column += 1;
				return SUCCESS;
			}
			break;
		case KeyEvent.VK_DOWN:  // 40
			if (row < rows-1 && charAt(row+1, column) != '0') {
				row += 1;
				return SUCCESS;
			}
			break;
		}
		return FAIL;
	}

	private char charAt(int row, int column) {
		return lines.get(row).charAt(column);
	}

	@Override
	public void draw(Graphics2D g) {
		for (int r=0; r<rows; r++){
			for (int c=0; c<columns; c++){
				if (charAt(r, c) != '0'){
					g.fillRect(c*STEP, r*STEP, STEP, STEP);
				}
			}
		}
		g.drawImage(man.getSubimage((c)*24, (curDir-37)*29, 25, 28),  column*STEP-13,  row*STEP-14,  null);
	}

}
*/